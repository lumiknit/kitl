$flow-node-color-bg: #fff;
$flow-node-color-fg: #363d47;
$flow-node-color-def: #db5614;
$flow-node-color-beta: #363d47;
$flow-node-color-lambda: #085ed7;
$flow-node-color-comment: #46923c;

$flow-node-colors: (
  bg: $flow-node-color-bg,
  fg: $flow-node-color-fg,
  def: $flow-node-color-def,
  beta: $flow-node-color-beta,
  lambda: $flow-node-color-lambda,
  comment: $flow-node-color-comment,
);

$flow-edge-colors: (
  default: #5b626a,
  selected: #1697dc,
);

@use "sass:list";
@use "sass:map";

/* Node shape */

.react-flow__node {
  font-size: 1rem;
  line-height: 1;
  font-family: sans-serif;
  padding: 0.3rem 0.5rem;
  text-align: center;
  min-width: 1rem;
  min-height: 1rem;
  background-color: #fff8;
}

.react-flow__node-def {
  color: $flow-node-color-def;
  border: 0.1rem solid $flow-node-color-def;
  /*background: $flow-node-color-op;*/
  border-radius: 999rem;
  font-size: 0.8rem;
  color: $flow-node-color-def;
  background: transparent;
  min-width: 5rem;
  padding: 0.5rem 1rem;
}

.react-flow__node-beta {
  color: $flow-node-color-beta;
  border: 0.1rem solid $flow-node-color-beta;
  border-radius: 0.5rem;
}

.react-flow__node-lambda {
  color: $flow-node-color-lambda;
  border: 0.1rem solid $flow-node-color-lambda;
  border-radius: 0.25rem;
}

.react-flow__node-comment {
  font-family: serif;
  font-size: 0.75rem;
  max-width: 20rem;
  color: $flow-node-color-comment;
  background: rgba($flow-node-color-bg, 0.5);
  border: 0;
  border-left: 4px solid $flow-node-color-comment;
  border-radius: 0;
  padding: 0.1rem 0.2rem;
  text-align: left;
}

.react-flow__node.selected {
  box-shadow: 0 0.1rem 0.4rem rgba($flow-node-color-fg, 0.5);
}

/* Name Display */
.flow-name-display {
  display: inline-block;
  text-align: left;
}

.flow-name-display-name {
  font-size: 1rem;
}

.flow-name-display-module {
  font-size: 0.4rem;
  font-style: italic;
}

/* Handles */

.react-flow__handle {
  width: 0.6rem;
  height: 0.6rem;
}

$handle_off: 0.35rem;

@each $_, $pos in (left: left, top: top, right: right, bottom: bottom) {
  .react-flow__handle-#{$pos} {
    #{$pos}: -$handle_off;
  }
}

.react-flow__handle.connecting {
  box-shadow: 0 0 5px $flow-node-color-lambda;
}

/* Handle mixins */

@mixin flow-handle-border-style($style) {
  border-width: 0.1rem;
  border-style: $style;
}

@mixin flow-handle-border-color($style, $fg, $bg) {
  @if $style == in {
    border-color: $fg;
    background-color: $bg;
  } @else {
    border-color: $bg;
    background-color: $fg;
  }
}

/* Handle definitions */
@each $type,
  $style
    in (
      arg: (
        in,
        solid,
      ),
      ret: (
        out,
        solid,
      )
    )
{
  @each $key, $color in $flow-node-colors {
    .flow-handle-#{$key}-#{$type} {
      @include flow-handle-border-style(list.nth($style, 2));
      @include flow-handle-border-color(
        list.nth($style, 1),
        $color,
        $flow-node-color-bg
      );
    }
  }
}

/* Edge */

.react-flow__edge path.react-flow__edge-path {
  stroke: map.get($flow-edge-colors, default);
  stroke-width: 1.2;
}

marker.react-flow__arrowhead polyline {
  stroke: map.get($flow-edge-colors, default);
  fill: map.get($flow-edge-colors, default);
}

.react-flow__edge.selected path.react-flow__edge-path {
  stroke: map.get($flow-edge-colors, default);
  stroke-width: 2;
  filter: drop-shadow(0 0 2px rgba($flow-node-color-fg, 0.3));
}
